// This example was cleaned up and made to work by Eliot Lyon in October, 2015

// Organization Schema
//Person
CLASS Person "Persons related to the company"
(
    person_id : INTEGER, REQUIRED;
    first_name : STRING, REQUIRED;
    last_name : STRING, REQUIRED;
    home_address : STRING;
    zipcode : INTEGER;
    home_phone "Home phone number (optional)" : INTEGER;
    us_citizen "U.S. citizenship status" : BOOLEAN, REQUIRED;
    spouse "Person's spouse if married" : Person, INVERSE IS
    spouse;
    children "Person's children (optional)" : Person, MV(DISTINCT),
    INVERSE IS parents;
    parents "Person's parents (optional)" : Person, MV (DISTINCT,
    MAX 2), INVERSE IS children;
);
// Persons with person_id 1 to 5 created
INSERT Person ( person_id := 1 , first_name := "Bill" , last_name := "Dawer" , home_address:= "432 Hill Rd", zipcode := 78705, home_phone := 7891903 , us_citizen := TRUE );
INSERT Person ( person_id := 2 , first_name := "Diane" , last_name:= "Wall" , home_address:= "32 Cannon Dr", zipcode  := 78705, home_phone := 7891903 , us_citizen := TRUE );
INSERT Person ( person_id := 3 , first_name := "Jennifer" , last_name := "Brown" , home_address:= "35 Palm Lane", zipcode := 73014, home_phone := 2360884 , us_citizen := TRUE );
INSERT Person ( person_id := 4, first_name := "Alice" , last_name := "Dawer" , home_address:= "432 Hill Rd", zipcode := 78021, home_phone := 6541658 , us_citizen := FALSE );
INSERT Person ( person_id := 5 , first_name := "George" , last_name := "Layton" , home_address:= "347 Nueces St", zipcode := 78705, home_phone := 8798798 , us_citizen := TRUE );
INSERT Person ( person_id := 9 , first_name := "Mike" , last_name := "Dawer" , home_address:= "432 Hill Rd", zipcode := 78705, home_phone := 7891903 , us_citizen := TRUE );
//Finally person_id 1 to 9 People

//Employee
SUBCLASS Employee "Current employees of the company" OF Person
(
    employee_id "Unique employee identification" : INTEGER,
    REQUIRED;
    salary "Current yearly salary" : INTEGER, REQUIRED;
    salary_exception "TRUE if salary can exceed maximum" : BOOLEAN;
    employee_manager "Employee's current manager" : Manager,
    INVERSE IS employees_managing;
);
// Person with person_id 1, 2, and 5 made employee
INSERT Employee FROM Person WHERE first_name = "Bill" AND last_name = "Dawer" ( employee_id:= 101,salary:= 70200, salary_exception := TRUE );
INSERT Employee FROM Person WHERE person_id = 2 ( employee_id:= 102,salary:= 80210, salary_exception := FALSE );
INSERT Employee FROM Person WHERE person_id = 5 ( employee_id:= 105,salary:= 70201, salary_exception := FALSE );
// Persons with person_id 6 to 7 created and made Employee
INSERT Employee ( person_id := 6 , first_name := "Susan" , last_name := "Petro" , home_address:= "323 Country Lane", zipcode := 73421, home_phone := 6541238 , us_citizen := TRUE , employee_id:= 106,salary:= 70210);
INSERT Employee ( person_id := 7 , first_name := "Steven" , last_name := "Williams" , home_address:= "3 Seton St", zipcode := 78705, home_phone := 8798712 , us_citizen := FALSE , employee_id:= 107,salary:= 70210);
// Finally person_id 1, 2, 3, 5, 6 , 7 and 8 are Employee

// Project_Employee
SUBCLASS Project_Employee "Employees who are project team members" OF Employee
(
current_projects "current project of employee" : Current_Project,
MV (DISTINCT, MAX 6), INVERSE IS project_members;
);
// Person with Person_id 1, 2, 5, 6 and 7 made Project_Employee
INSERT Project_Employee FROM Employee WHERE employee_id = 101 ();
INSERT Project_Employee FROM Employee WHERE employee_id = 102 ();
INSERT Project_Employee FROM Person WHERE person_id = 3 (employee_id:= 103,salary:= 80210) ;
INSERT Project_Employee FROM Employee WHERE employee_id = 106 ();
INSERT Project_Employee FROM Employee WHERE employee_id = 107 ();
// Finally person_id 1, 2, 3, 6 and 7 are Project_Employee

//Manager
SUBCLASS Manager "Managers of the company" OF Employee
(
bonus "Yearly bonus, if any" : INTEGER;
employees_managing "Employees reporting to manager" : Employee,
MV, INVERSE IS employee_manager;
projects_managing "Projects responsible for" : Project, MV, INVERSE IS project_manager;
manager_dept "Department to which manager belong" : Department,
INVERSE IS dept_managers;
);
// Persons with person_id 8 created and made Employee and Manager
INSERT Manager ( person_id := 8 , first_name := "Henry" , last_name := "Silverstone" , home_address:= "100 Gates St", zipcode := 70007, home_phone := 4565404 , us_citizen := TRUE ,employee_id:= 108,salary:= 570201 , bonus:= 200000 );
// Persons with person_id 1 made Manager
INSERT Manager FROM Employee WHERE employee_id = 101 ( bonus:= 10000 );
// Finally person_id 1 , 7 and 8 are Project_Employee

// Interim_Manager
SUBCLASS Interim_Manager "Employees temporarily acting as a project employee and a manager" OF Manager AND Project_Employee();
// Person with Person_id 1 and 7 made Interim_Manager.
// Note 7 will be automatically made manager
INSERT Interim_Manager FROM Manager WHERE employee_id = 101 ();
INSERT Interim_Manager FROM Employee WHERE employee_id = 107 ();
// Finally person_id 1 and 7

// President
SUBCLASS President "Current president of the company" OF Manager();
// Persons with person_id 8 made President
INSERT President FROM Person WHERE first_name = "Henry" AND last_name = "Silverstone" ();
// Finally person_id 8

// Previous_Employee
SUBCLASS Previous_Employee "Past employees of the company" OF
Person
(
    IsFired : BOOLEAN ;
    salary "Salary as of termination" : INTEGER, REQUIRED;
);
// Persons with person_id 4 created and made Previous_Employee
INSERT Previous_Employee FROM Person WHERE person_id = 4 ( salary:= 50500 ) ;

// Project
CLASS Project "Current and completed Projects"
(
    project_no "Unique project identification" : INTEGER, REQUIRED;
    project_title "Code name for project" : STRING [20], REQUIRED;
    project_manager "Current project manager" : Manager, INVERSE IS projects_managing;
    dept_assigned "Responsible department" : Department, SV, INVERSE IS project_at;
    sub_projects "Component projects, if any" : Project, MV, INVERSE IS sub_project_of;
    sub_project_of "Master project, if any" : Project, INVERSE IS sub_projects;
);
INSERT Project( project_no:= 701 ,project_title := "Mission Impossible");
INSERT Project( project_no:= 702 ,project_title := "Code Red");
INSERT Project( project_no:= 703 ,project_title := "Desert Rose");
INSERT Project( project_no:= 704 ,project_title := "Hallo");
INSERT Project( project_no:= 705 ,project_title := "Stick And Fly");
INSERT Project( project_no:= 706 ,project_title := "Night Rider");

// Current_Project
SUBCLASS Current_Project "Projects currently in progress" OF
Project
(
    project_active "Whether project has been started" : BOOLEAN, REQUIRED;
    project_members "Current employees on project" : Project_Employee, MV (DISTINCT, MAX 20), INVERSE IS current_projects;
);
INSERT Current_Project FROM Project WHERE project_title = "Mission Impossible"( project_active := TRUE );
INSERT Current_Project FROM Project WHERE project_title = "Hallo"( project_active := FALSE );
INSERT Current_Project FROM Project WHERE project_title = "Stick And Fly"( project_active := TRUE );
INSERT Current_Project FROM Project WHERE project_title = "Night Rider"( project_active := TRUE );

// Previous_Project
SUBCLASS Previous_Project "Completed Projects" OF Project
(
end_date_month "Date project completed month" : INTEGER;
end_date_day "Date project completed day" : INTEGER;
end_date_year "Date project completed year" : INTEGER;
est_person_hours "Estimated hours to complete" : INTEGER;
);
INSERT Previous_Project FROM Project WHERE project_title = "Code Red"( est_person_hours := 2000,end_date_month := 1, end_date_day := 6 , end_date_year := 1999);
INSERT Previous_Project FROM Project WHERE project_title =
"Desert Rose"( est_person_hours := 1300,end_date_month := 5, end_date_day := 3 , end_date_year := 1997);

// Previous_Project
SUBCLASS Proposed_Project "Unaproved Projects" OF Project
(
);

// Department
CLASS Department "Departments within the company"
(
    dept_no "Corporate department number" : INTEGER, REQUIRED;
    dept_name "Corporate department name" : STRING [20], REQUIRED;
    project_at "Projects worked on at this department" : Project , INVERSE IS dept_assigned, MV (DISTINCT);
    dept_managers "Managers for this department" : Manager, MV, INVERSE IS manager_dept;
);
INSERT Department( dept_no:= 501 ,dept_name := "Purchasing");
INSERT Department( dept_no:= 502 ,dept_name := "Sales");
INSERT Department( dept_no:= 503 ,dept_name := "Marketing");
INSERT Department( dept_no:= 504 ,dept_name := "R&D");
INSERT Department( dept_no:= 505 ,dept_name := "Accounting");

// EVA Relationship
MODIFY LIMIT = 1 Person ( spouse := Person WITH (first_name = "Bill" AND last_name = "Dawer") ) WHERE first_name = "Alice" AND last_name = "Dawer";
MODIFY Person ( children := INCLUDE Person WITH (first_name = "Bill" AND last_name = "Dawer")) WHERE first_name = "Mike" AND last_name = "Dawer" ;
MODIFY LIMIT = ALL Employee (employee_manager := Manager WITH(first_name = "Bill" AND last_name = "Dawer")) WHERE employee_id = 102 OR employee_id = 106;
MODIFY LIMIT = ALL Employee (employee_manager := Manager WITH(first_name = "Steven" AND last_name = "Williams")) WHERE employee_id = 103 OR employee_id = 105;
MODIFY LIMIT = ALL Employee ( employee_manager := Manager WITH(first_name = "Henry" AND last_name = "Silverstone")) WHERE employee_id = 101 OR employee_id = 107;
MODIFY LIMIT = ALL Employee ( employee_manager := Manager WITH(first_name = "Henry" AND last_name = "Silverstone")) WHERE employee_id = 101 OR employee_id = 107;
MODIFY LIMIT = ALL Project_Employee( current_projects := INCLUDE Current_Project WITH ( project_title = "Mission Impossible" )) WHERE person_id = 7 OR person_id = 3 OR person_id = 2 OR employee_id = 106 OR person_id = 1;
MODIFY LIMIT = ALL Project_Employee( current_projects := INCLUDE Current_Project WITH ( project_title = "Stick And Fly" )) WHERE person_id = 3 OR person_id = 7 OR person_id = 106;
MODIFY LIMIT = ALL Project_Employee( current_projects := INCLUDE Current_Project WITH ( project_title = "Night Rider" )) WHERE person_id = 2 OR person_id = 1 OR person_id = 7;
MODIFY Manager (projects_managing := INCLUDE Project WITH( project_title = "Mission Impossible" OR project_title = "Night Rider"), manager_dept := Department WITH ( dept_name = "Sales" )) WHERE employee_id = 101;
MODIFY Manager (projects_managing := INCLUDE Project WITH( project_title = "Stick And Fly" OR project_title = "Code Red" OR project_title = "Desert Rose" OR project_title = "Hallo"), manager_dept := Department WITH ( dept_name = "R&D")) WHERE employee_id = 107;
MODIFY Manager (manager_dept := Department WITH ( dept_name = "Sales")) WHERE employee_id = 108;
MODIFY Department ( project_at := INCLUDE Project WITH ( project_title = "Mission Impossible" OR project_title = "Night Rider")) WHERE dept_name = "Sales";
MODIFY Department ( project_at := INCLUDE Project WITH (project_title = "Stick And Fly" OR project_title = "Code Red" OR project_title = "Desert Rose" OR project_title = "Hallo"))WHERE dept_name = "R&D";
MODIFY Project ( sub_projects := INCLUDE Project WITH (project_title = "Stick And Fly" OR project_title = "Desert Rose")) WHERE project_title = "Code Red";